#!/usr/bin/python3

""" amdpsp-dig

Scrape PSP binaries from AGESA firmware images.
Intended to be run on *lots* of firmware images at once.

Prior Art
=========

See the following repositories for other implementations:

https://github.com/system76/romulan
https://github.com/PSPReverse/PSPTool

Other Notes
===========

FYI: Parsing for AM5 firmware images might be partially/totally broken.

"""

from sys import argv
from hexdump import hexdump
from struct import unpack, iter_unpack
import pathlib
import hashlib
import zlib
import json

# Preserve discovered binaries across runs.
LIBRARY      = {}
LIBRARY_FILE = "/tmp/amdpsp-dig.json"
LIBRARY_DIR  = "/tmp/amdpsp"

try:
    pathlib.Path(LIBRARY_DIR).mkdir()
except FileExistsError:
    pass
try:
    with open(LIBRARY_FILE) as f:
        LIBRARY = json.load(f)
    print("Loaded from {}".format(LIBRARY_FILE))
except FileNotFoundError:
    print("No library found")
    for i in range(0, 0x100): 
        LIBRARY[str(i)] = {}

def add_to_library(filename, typ, data, version):
    """ Add an entry to the library """
    type_key = str(typ)
    sha1 = hashlib.sha1(data).hexdigest()
    if LIBRARY[type_key].get(sha1) != None:
        LIBRARY[type_key][sha1]['obs'] += 1
    else:
        outname = "{}_{:08x}_{}.bin".format(entry_filename(typ), version, sha1[:8])
        outfile = "{}/{}".format(LIBRARY_DIR, outname)
        with open(outfile, "wb") as f: f.write(data)
        LIBRARY[type_key][sha1] = { 
            "file": filename, 
            "size": len(data), 
            "obs": 1,
            "ver": version,
        }


def entry_filename(x):
    """ Return a filename for a particular entry type """
    match x:
        case 0x00: return "PUBKEY_AMD"
        case 0x01: return "PSP_BL"
        case 0x02: return "PSP_TOS"
        case 0x03: return "PSP_RBL"
        case 0x04: return "PSP_NVRAM"
        case 0x05: return "PUBKEY_PSP_RTM"
        case 0x06: return "X86_BOOTSTRAP"
        case 0x08: return "SMU_FW"
        case 0x09: return "PUBKEY_DBG_UNLOCK"
        case 0x0a: return "PUBKEY_OEM"
        case 0x0b: return "PSP_SOFTFUSE_CHAIN"
        case 0x0c: return "PSP_TRUSTLET"
        case 0x0d: return "PUBKEY_PSP_TRUSTLET"
        case 0x12: return "SMU_FW2"
        case 0x13: return "PSP_DBG_UNLOCK"
        case 0x20: return "HW_IP_DISCOVERY"
        case 0x21: return "WRAPPED_IKEK"
        case 0x22: return "PSP_TOKEN_UNLOCK"
        case 0x24: return "GASKET_POLICY"
        case 0x25: return "MP2_SMU_FW"
        case 0x26: return "MP2_SMU_FW2"
        case 0x27: return "USERMODE_UNIT_TEST"
        case 0x28: return "PSP_TOS_DRIVER"
        case 0x29: return "KVM_ENGINE"
        case 0x2a: return "MP5_FW"
        case 0x2b: return "EMBEDDED_FW_SIG"
        case 0x2c: return "TEE_NVRAM"
        case 0x2d: return "AGESA_RUNTIME_DRIVER_SOI3"
        case 0x2e: return "MP0_FW_EXT_CHIPSET"
        case 0x2f: return "MP1_FW_EXT_CHIPSET"
        case 0x30: return "ABL0"
        case 0x31: return "ABL1"
        case 0x32: return "ABL2"
        case 0x33: return "ABL3"
        case 0x34: return "ABL4"
        case 0x35: return "ABL5"
        case 0x36: return "ABL6"
        case 0x37: return "ABL7"
        case 0x38: return "SEV_DATA"
        case 0x39: return "SEV_CODE"
        case 0x3a: return "PSP_WHITELIST"
        case 0x3c: return "VBIOS_BL"
        case 0x42: return "DXIO_PHY_SRAM_FW"
        case 0x43: return "PUBKEY_DXIO_PHY_SRAM_FW"
        case 0x44: return "UNIFIED_USB_PHY_FW"
        case 0x45: return "TOS_POLICY_L1"
        case 0x46: return "BIXBY_BOOTROM?"
        case 0x47: return "DRTM_TRUSTED_APP"
        case 0x4e: return "PUBKEY_PMU_FW"
        case 0x50: return "PUBKEY_TABLE_PSP_BL"
        case 0x51: return "PUBKEY_TABLE_PSP_TOS"
        case 0x52: return "PSP_BL_OEM_PROGRAM"
        case 0x58: return "DMCU_ERAM"
        case 0x59: return "DMCU_ISR_FW"
        case _: return "UNK_{:02x}".format(x)


def entry_name(x):
    """ Return a description for an entry type """
    match x:
        case 0x00: return "Public Key (AMD)"
        case 0x01: return "PSP Bootloader"
        case 0x02: return "PSP Secure OS"
        case 0x03: return "PSP Recovery Bootloader"
        case 0x04: return "PSP NVRAM Data (?)"
        case 0x05: return "Public Key (PSP RTM ?)"
        case 0x06: return "X86 Bootstrap Stub?"
        case 0x08: return "SMU Off-Chip Firmware"
        case 0x09: return "Public Key (AMD Secure Debug Unlock)"
        case 0x0a: return "Public Key (OEM)"
        case 0x0b: return "PSP Soft-fuse Chain"
        case 0x0c: return "PSP Trustlet Binary"
        case 0x0d: return "Public Key (PSP Trustlet ?)"
        case 0x12: return "SMU Off-Chip firmware (section 2)"
        case 0x13: return "PSP Secure Debug Unlock (debug image)"
        case 0x20: return "HW IP Discovery/Config (?)"
        case 0x21: return "Wrapped IKEK"
        case 0x22: return "PSP Token Unlock Data"
        case 0x24: return "Security Gasket Policy Binary (?)"
        case 0x25: return "MP2 (SMU) firmware"
        case 0x26: return "MP2 (SMU) firmware (section 2?)"
        case 0x27: return "User Mode Unit Test (?)"
        case 0x28: return "PSP Secure OS System Driver"
        case 0x29: return "KvmEngineDummy?"
        case 0x2a: return "MP5 Firmware (?)"
        case 0x2b: return "Embedded Firmware Signature (?)"
        case 0x2c: return "TEE NVRAM (?)"
        case 0x2d: return "AGESA Runtime Driver? (SOI3?)"
        case 0x2e: return "MP0 Firmware (External Chipset?)"
        case 0x2f: return "MP1 Firmware (External Chipset?)"
        case 0x30: return "AGESA Bootloader (ABL) 0"
        case 0x31: return "AGESA Bootloader (ABL) 1"
        case 0x32: return "AGESA Bootloader (ABL) 2"
        case 0x33: return "AGESA Bootloader (ABL) 3"
        case 0x34: return "AGESA Bootloader (ABL) 4"
        case 0x35: return "AGESA Bootloader (ABL) 5"
        case 0x36: return "AGESA Bootloader (ABL) 6"
        case 0x37: return "AGESA Bootloader (ABL) 7"
        case 0x38: return "SEV Data (?)"
        case 0x39: return "SEV Code (?)"
        case 0x3a: return "PSP Processor Whitelist Data (?)"
        case 0x3c: return "VBIOS Bootloader (?)"
        case 0x40: return "PSP Directory Table (level 2)"
        case 0x42: return "DXIO PHY SRAM Firmware (?)"
        case 0x43: return "Public Key (DXIO PHY SRAM Firmware ?)"
        case 0x44: return "Unified USB PHY Firmware (?)"
        case 0x45: return "Trusted OS Secure Policy L1 (?)"
        case 0x46: return "Bixby Boot ROM (?)"
        case 0x47: return "DRTM Trusted App (?)"
        case 0x48: return "PSP Directory Table Backup?"
        case 0x49: return "BIOS Table (?)"
        case 0x4a: return "PSP Directory Table Backup?"
        case 0x4e: return "Public Key (PHY Microcontroller ?)"
        case 0x50: return "Public Key Table (PSP Bootloader)"
        case 0x51: return "Public Key Table (PSP Trusted OS)"
        case 0x52: return "PSP Bootloader Usermode/OEM Program"
        case 0x54: return "RPMC NVRAM (?)"
        case 0x55: return "SplTableBl (?)"
        case 0x58: return "Display Microcontroller ERAM (?)"
        case 0x59: return "Display Microcontroller ISR Firmware (?)"
        case 0x5a: return "MSMU (?)"
        case 0x5c: return "SPI ROM Config (?)"
        case 0x5f: return "Pluton Platform FW (?)"
        case 0x6a: return "MP2 Firmware Config"
        case 0x71: return "DMCUB (?)"
        case 0x73: return "PSP Bootloader 2 (?)"
        case 0x8d: return "IKEK TA (?)"
        case _: return "UNK_{:02x}".format(x)



def find_magic(data: bytes, magic: bytes) -> list:
    """ Return a list of offsets for some set of bytes """
    cur = 0
    offsets = []
    while cur < len(data):
        off = data[cur:].find(magic)
        if off == -1:
            break
        offsets.append(cur + off)
        cur = cur + off + len(magic)
    return offsets

# NOTE: These are really only observed in AM5 firmware images?
def parse_backup_directory(fn, data, off):
    MAX_ENTRIES = 40
    hdr_off = off
    ent_off = hdr_off + 0x10
    hdr_data = data[hdr_off:hdr_off+0x10]
    chksum, num_ent, reserved = unpack("<LLL", hdr_data[0x04:])
    match data[hdr_off:hdr_off+0x04]:
        case b'$PSP': 
            print("[*] Found PSP backup Directory    off={:08x} num_ent={:08x}".format(
                off, num_ent))
            if num_ent > MAX_ENTRIES:
                print("Skipping directory (has {:08x} entries??)".format(num_ent))
                return
        case b'$PL2': 
            print("[*] Found PSP L2 backup Directory off={:08x} num_ent={:08x}".format(
                off, num_ent))
            if num_ent > MAX_ENTRIES:
                print("Skipping directory (has {:08x} entries??)".format(num_ent))
                return
        case _: 
            print(hexdump(data[hdr_off:hdr_off+0x100]))
            raise Exception("Invalid directory (magic {})".format(hdr_data[0x00:0x04]))

    ent_data = data[ent_off:(ent_off + (num_ent * 0x10))]
    for (typ, sub_prog, _, size, loc) in iter_unpack("<BBHLQ", ent_data):

        # This is specific to the "backup tables" observed in x670.
        # It seems like 0x93 is the only exception, and the addressing
        # isn't relative to the directory offset. 
        match typ:
            case 0x93: addr = loc & 0xffffffff
            case _:    addr = (loc + off) & 0xffffffff

        print("  subprog={:04x} size={:08x} loc={:016x} {:02x} {}".format(
            sub_prog, size, addr, typ, entry_name(typ)
        ))
        if size == 0xffffffff:
            continue
        if size > len(data):
            continue

        match typ:
            # Recurse into subdirectories
            case 0x40: parse_directory(fn, data, addr)
            case 0x48: 
                arr = unpack("<8L", data[addr:addr+0x20])
                level2_off = arr[4]
                parse_backup_directory(fn, data, level2_off)
            case 0x4a: 
                arr = unpack("<8L", data[addr:addr+0x20])
                level2_off = arr[4]
                parse_backup_directory(fn, data, level2_off)
            # BIOS Directory table
            case 0x46: continue
            # Parse entries
            case _: parse_entry(fn, typ, data, addr, size)


# NOTE: Need to validate this strategy
def get_addr(img_sz, off):
    """ Get the appropriate offset into the image """
    base_offset = img_sz & 0x000fffff
    if img_sz >= 0x02000000:
        return (off & 0x00ffffff) + base_offset
    elif img_sz >= 0x01000000:
        return (off & 0x00ffffff) + base_offset
    elif img_sz >= 0x00800000:
        return (off & 0x007fffff) + base_offset
    else:
        raise Exception("Unhandled image size {:08x}".format(img_sz))
    #match img_sz:
    #    case 0x02000000: return (off & 0x01ffffff)
    #    case 0x02001000: return (off & 0x01ffffff) + 0x00001000
    #    case 0x01001000: return (off & 0x00ffffff) + 0x00001000
    #    case 0x01000800: return (off & 0x00ffffff) + 0x00000800
    #    case 0x01000000: return (off & 0x00ffffff)
    #    case 0x00801000: return (off & 0x007fffff) + 0x00001000
    #    case 0x00800800: return (off & 0x007fffff) + 0x00000800
    #    case 0x00800000: return (off & 0x007fffff)
    #    case _:
    #        raise Exception("Unhandled image size {:08x}".format(img_sz))



def parse_directory(fn, data, off, backup_dir=False):
    """ Parse a PSP Directory """

    MAX_ENTRIES = 40
    hdr_off = off
    ent_off = hdr_off + 0x10
    hdr_data = data[hdr_off:hdr_off+0x10]
    chksum, num_ent, reserved = unpack("<LLL", hdr_data[0x04:])
    print("reserved={:08x}".format(reserved))

    match data[hdr_off:hdr_off+0x04]:
        case b'$PSP': 
            print("[*] Found PSP Directory    off={:08x} num_ent={:08x}".format(
                off, num_ent))
            if num_ent > MAX_ENTRIES:
                print("Skipping directory (has {:08x} entries??)".format(num_ent))
                return
        case b'$PL2': 
            print("[*] Found PSP L2 Directory off={:08x} num_ent={:08x}".format(
                off, num_ent))
            if num_ent > MAX_ENTRIES:
                print("Skipping directory (has {:08x} entries??)".format(num_ent))
                return
        case _: 
            print(hexdump(data[hdr_off:hdr_off+0x100]))
            raise Exception("Invalid directory (magic {})".format(hdr_data[0x00:0x04]))
            exit()

    print("Parsing directory @ {:08x} ({} entries) ...".format(off, num_ent))
    ent_data = data[ent_off:(ent_off + (num_ent * 0x10))]
    for (typ, sub_prog, _, size, loc) in iter_unpack("<BBHLQ", ent_data):
        print("  subprog={:04x} size={:08x} loc={:016x} {:02x} {}".format(
            sub_prog, size, loc, typ, entry_name(typ)
        ))

        # Soft-fuse bits are encoded in the entry address
        # (see coreboot for these flag definitions)
        if typ == 0x0b:
            set_bits = []
            for i in range(0, 64):
                if ((loc & (1 << i)) != 0): 
                    set_bits.append(i)
            debug_en = (loc & (1 << 0))  != 0
            diag_bl  = (loc & (1 << 5))  != 0
            unk_6    = (loc & (1 << 6))  != 0
            post_dis = (loc & (1 << 7))  != 0
            espi_en  = (loc & (1 << 15)) != 0
            unk_28   = (loc & (1 << 28)) != 0
            mp2_dis  = (loc & (1 << 29)) != 0
            unk_35   = (loc & (1 << 35)) != 0
            soi3_en  = (loc & (1 << 58)) != 0
            print(" Softfuse bits={}".format(set_bits))
            #print(" Enable Secure Debug Unlock:    {}".format(debug_en))
            #print(" Enable diagnostic bootloader?  {}".format(diag_bl))
            #print(" Disable port 80 post codes:    {}".format(post_dis))
            #print(" Use eSPI instead of LPC:       {}".format(espi_en))
            #print(" Disable MP2/SMU firmware load: {}".format(mp2_dis))
            #print(" Enable verstage in S0i3:       {}".format(soi3_en))
            continue

        if size == 0xffffffff: continue
        if size > len(data): continue

        # NOTE: Backup directories are always size zero?
        if typ not in [0x49, 0x4a] and size == 0: 
            continue

        # Compute the offset ('addr') of the data for this entry.
        addr = get_addr(len(data), loc)
        if off >= 0x01000000: 
            addr += 0x01000000

        match typ:
            # Recurse into subdirectories
            case 0x40: 
                parse_directory(fn, data, addr)
            # Recurse into backup directory
            case 0x48: 
                arr = unpack("<6L", data[addr:addr+0x18])
                for x in arr: print("{:016x}".format(x))
                level2_off = arr[4] + 0x1000
                #print(hexdump(data[level2_off:level2_off+0x100]))
                parse_backup_directory(fn, data, level2_off)
            # Recurse into backup directory
            case 0x4a: 
                arr = unpack("<6L", data[addr:addr+0x18])
                for x in arr: print("{:016x}".format(x))
                level2_off = arr[4] + 0x1000
                #print(hexdump(data[level2_off:level2_off+0x100]))
                parse_backup_directory(fn, data, level2_off)
            # Skip BIOS Directory table? 
            case 0x46: 
                continue
            # Assume all other entries are files we can parse
            case _: 
                parse_entry(fn, typ, data, addr, size)


# I don't particularly care about looking at these entries right now
# FIXME: You should just dump these anyway because why not.
SKIP_TYPES = [
        # Key material
        0x00, 0x05, 0x09, 0x0a, 0x0d, 0x21, 0x43, 0x4e,

        # Token Unlock data (always empty, hopefully).
        # If this is anything like the softfuse entry, data might
        # also be included in the size/offset fields?
        0x22,

        # Flat data, usually empty?
        0x38,
        # NOTE: Is this like, the x86 boot stub or something? No clue.
        0x06,
        # Blob starts with '!SCSCarrizo' (carrizo is an Excavator APU?)
        0x5f,
        # Empty data?
        0x1a,
        # KvmEngineDummy, empty?
        0x29,
        # unknown blob
        0x63, 
        # PN30-ASUS-0307.CAP, no idea
        0x07,
        # "embedded firmware signature"
        0x2b,

        # Haven't observed these outside of AM5 images?
        0x55, 0x73, 0x49, 0x5a, 0x5d, 0x71, 0x76, 0x91, 0x8d,
]

# Entry types with a consistent 0x100-byte header
HDR_TYPES = [
        0x01, 0x02, 0x03, 0x08, 0x0c,
        0x10, 0x12, 0x13, 0x14, 
        0x20, 0x24, 0x25, 0x28, 0x2a, 0x2d, 0x2e, 0x2f,
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x39, 0x3c,
        0x42, 0x44, 0x45, 0x47, 0x4c, 0x4d,
        0x50, 0x51, 0x58, 0x59, 0x5c,
        # These seem like the ABL entries, maybe old?
        0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6,
        # What is this even? "RCFG3328A_FW"?
        0x93,
        # I think this was in some Hygon image?
        0x11,
]

def parse_entry(fn, typ, data, off, size):
    """ Parse an entry in some PSP directory """

    #print(hexdump(data[off:off+0x200]))
    if typ in SKIP_TYPES: 
        return;

    edata = data[off:off+size]
    if size < 0x10:
        print("Skipping entry of size {:08x}".format(size))
        print(hexdump(edata))
        return;

    if typ in HDR_TYPES:
        hdr_data   = edata[0x000:0x100]
        #print(hexdump(hdr_data))
        content    = edata[0x100:]

        # Don't know exactly what this is
        unk_bytes  =              hdr_data[0x000:0x010]
        # Some entries have no magic
        magic      =              hdr_data[0x010:0x014]
        # ????
        sz_signed  = unpack("<L", hdr_data[0x014:0x018])[0]
        # Set to 1 when this entry is encrypted with the wrapped key
        is_enc     = unpack("<L", hdr_data[0x018:0x01c])[0] == 1
        # IV associated with the wrapped key
        iv_bytes   =              hdr_data[0x020:0x030]
        # Set to 1 when this entry is signed
        is_signed  = unpack("<L", hdr_data[0x030:0x034])[0] == 1
        unk_34     = unpack("<L", hdr_data[0x034:0x038])[0]
        # Is this a hash?
        sig_bytes  =              hdr_data[0x038:0x048]
        # Set to 1 when this entry is compressed
        is_comp    = unpack("<L", hdr_data[0x048:0x04c])[0] == 1
        # Uncompressed size
        uncomp_sz  = unpack("<I", hdr_data[0x050:0x054])[0]
        # Compressed size
        comp_sz    = unpack("<L", hdr_data[0x054:0x058])[0]
        # Version number
        version    = unpack("<L", hdr_data[0x060:0x064])[0]
        # Some kind of magic bytes describing the associated chipset?
        chipset    =              hdr_data[0x064:0x068]
        # Load address for binaries?
        addr       = unpack("<L", hdr_data[0x068:0x06c])[0]
        # The size of this entry?
        rom_sz     = unpack("<L", hdr_data[0x06c:0x070])[0]
        # The entry type
        entry_id   = unpack("<B", hdr_data[0x07c:0x07d])[0]
        # Wrapped key
        wkey_bytes =              hdr_data[0x080:0x090]

        #print("size        {:08x}".format(size))
        #print("magic       {}".format(magic))
        #print("signed size {:08x}".format(sz_signed))
        #print("encrypted   {}".format(is_enc))
        #print("signed      {}".format(is_signed))
        #print("unk_34      {:08x}".format(unk_34))
        #print("compressed  {}".format(is_comp))
        #print("uncomp size {:08x}".format(uncomp_sz))
        #print("comp size   {:08x}".format(comp_sz))
        #print("version     {:08x}".format(version))
        #print("chipset?    {}".format(chipset))
        #print("addr        {:08x}".format(addr))
        #print("rom size    {:08x}".format(rom_sz))
        #print("entry_id    {:02x}".format(entry_id))

        # Skip any encrypted entries (for now?) - we'd need to unwrap the
        # IKEK, and I'm pretty sure this involves using the CCP? 
        # Linux CCP drivers seem to be broken on lots of client machines
        # due to UEFI firmware issues (including mine).
        if is_enc: return

        # Handle compressed entries
        if not is_comp:
            fdata = content
        else:
            cdata = content[0:comp_sz]
            #match cdata[0x00:0x02]:
            #    case b'\x78\xda': print("[*] zlib best compression")
            #    case b'\x78\x9c': print("[*] zlib default compression")
            #    case b'\x78\x5e': print("[*] zlib compressed")
            #    case b'\x78\x01': print("[*] zlib no compression")
            #    case _: 
            #        # Not exactly sure what's up with this
            #        print("[!] No zlib header?")
            #        return
            try:
                udata = zlib.decompress(cdata)
            except zlib.error as e:
                print("[!] Failed to decompress")
                print(hexdump(cdata[0:0x100]))
                return
            if len(udata) != uncomp_sz:
                raise Exception("Uncompressed less data than expected")
            fdata = udata
    # This entry has no defined format; this is the best we can do for now
    else:
        version = 0
        fdata = edata
        print("[!] No format defined for entry {:02x}".format(typ))
        #print(hexdump(fdata))
        #raise Exception("Undefined entry format")

    # Try to add this entry to the library
    add_to_library(fn, typ, fdata, version)


def parse_image(fn, data):
    """ Find and parse all of the PSP directories in a firmware image """
    offsets = find_magic(data, b"$PSP")
    for off in offsets:
        if (off & 0xff) != 0: continue
        parse_directory(fn, data, off)
        print()

def print_library():
    # Print all of the unique entries we observed
    lib_size = 0
    ent_size = 0
    for t in LIBRARY:
        if len(LIBRARY[t]) == 0: 
            continue
        print("Observed for Type {:02x} ({})".format(int(t), entry_name(int(t))))
        for sha1 in LIBRARY[t]:
            size = LIBRARY[t][sha1]['size']
            fn   = LIBRARY[t][sha1]['file']
            obs  = LIBRARY[t][sha1]['obs']
            ver  = LIBRARY[t][sha1]['ver']
            lib_size += size
            ent_size += 1
            print("  {} ver={:08x} size={:08x} obs={:08} file={}".format(
                sha1, ver, size, obs, fn
            ))
        print()
    print("Library has {} entries ({:.2f}MiB)".format(
        ent_size, lib_size / (1000*1000))
    )

if __name__ == "__main__":

    if len(argv) < 2:
        print("usage: amdpsp-dig [files]")
        print_library()
        exit(-1)

    # Parse all of the provided files
    for filename in argv[1:]:
        with open(filename, "rb") as f:
            data = f.read()
            print("[*] Parsing file '{}' ({:08x} bytes)".format(
                filename, len(data))
            )
            parse_image(filename, data)
            print("="*80)

    with open(LIBRARY_FILE, "w") as f:
        json.dump(LIBRARY, f)
        print("Saved to {}".format(LIBRARY_FILE))

    print_library()



